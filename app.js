// ============================================
// SHIELDS CREATIVE - Badge Service Visuel
// Version 1.3 - StabilitÃ© Emojis & Couleurs
// ============================================

const express = require('express');
const app = express();

// ============================================
// MODULE : COULEURS
// ============================================
class ColorModule {
Â  static NAMED_COLORS = {
Â  Â  // Couleurs statut
Â  Â  'success': '44cc11',
Â  Â  'warning': 'f59e0b',
Â  Â  'error': 'ef4444',
Â  Â  'info': '3b82f6',
Â  Â Â 
Â  Â  // Couleurs standard
Â  Â  'brightgreen': '44cc11',
Â  Â  'green': '97CA00',
Â  Â  'yellowgreen': 'a4a61d',
Â  Â  'yellow': 'dfb317',
Â  Â  'orange': 'fe7d37',
Â  Â  'red': 'e05d44',
Â  Â  'blue': '007ec6',
Â  Â  'grey': '555',
Â  Â  'lightgrey': '9f9f9f',
Â  Â  'blueviolet': '8b5cf6',
Â  Â  'purple': '8b5cf6',
Â  Â  'pink': 'ec4899',
Â  Â  'gold': 'fbbf24'
Â  };

Â  static resolve(colorInput) {
Â  Â  if (!colorInput) return '8b5cf6';
Â  Â Â 
Â  Â  const normalized = colorInput.toLowerCase().replace('#', '');
Â  Â Â 
Â  Â  if (this.NAMED_COLORS[normalized]) {
Â  Â  Â  return this.NAMED_COLORS[normalized];
Â  Â  }
Â  Â Â 
Â  Â  if (/^[0-9a-f]{6}$/i.test(normalized)) {
Â  Â  Â  return normalized;
Â  Â  }
Â  Â  if (/^[0-9a-f]{3}$/i.test(normalized)) {
Â  Â  Â  return normalized.split('').map(c => c + c).join('');
Â  Â  }
Â  Â Â 
Â  Â  return '8b5cf6'; // Fallback
Â  }
}

// ============================================
// MODULE : STYLES VISUELS AVANCÃ‰S
// ============================================
class VisualStylesModule {
Â  static MODERN_STYLES = {
Â  Â  glass: {
Â  Â  Â  height: 32,
Â  Â  Â  radius: 12,
Â  Â  Â  font: 12,
Â  Â  Â  template: (config, dims) => `
Â  Â  Â  Â  <defs>
Â  Â  Â  Â  Â  <linearGradient id="glass-grad" x1="0%" y1="0%" x2="0%" y2="100%">
Â  Â  Â  Â  Â  Â  <stop offset="0%" style="stop-color:rgba(255,255,255,0.25)"/>
Â  Â  Â  Â  Â  Â  <stop offset="100%" style="stop-color:rgba(255,255,255,0.05)"/>
Â  Â  Â  Â  Â  </linearGradient>
Â  Â  Â  Â  </defs>
Â  Â  Â  Â  <rect width="${dims.totalWidth}" height="32" rx="12" fill="#${config.color}"/>
Â  Â  Â  Â  <rect width="${dims.totalWidth}" height="32" rx="12" fill="url(#glass-grad)"
Â  Â  Â  Â  Â  Â  Â  stroke="rgba(255,255,255,0.2)" stroke-width="1.5"/>
Â  Â  Â  `
Â  Â  },
Â  Â  neon: {
Â  Â  Â  height: 28,
Â  Â  Â  radius: 8,
Â  Â  Â  font: 11,
Â  Â  Â  template: (config, dims) => `
Â  Â  Â  Â  <rect class="neon-rect" width="${dims.totalWidth}" height="28" rx="8"
Â  Â  Â  Â  Â  Â  Â  fill="none" stroke="#${config.color}" stroke-width="2.5"
Â  Â  Â  Â  Â  Â  Â  style="filter: drop-shadow(0 0 4px #${config.color}99);"/>
Â  Â  Â  `
Â  Â  },
Â  Â  depth: {
Â  Â  Â  height: 30,
Â  Â  Â  radius: 6,
Â  Â  Â  font: 11,
Â  Â  Â  template: (config, dims) => `
Â  Â  Â  Â  <rect width="${dims.totalWidth}" height="30" rx="6"
Â  Â  Â  Â  Â  Â  Â  fill="#${config.color}" style="filter: drop-shadow(0 4px 3px rgba(0,0,0,0.3));"/>
Â  Â  Â  `
Â  Â  },
Â  Â  gradient: {
Â  Â  Â  height: 26,
Â  Â  Â  radius: 13,
Â  Â  Â  font: 11,
Â  Â  Â  template: (config, dims) => `
Â  Â  Â  Â  <defs>
Â  Â  Â  Â  Â  <linearGradient id="flow-grad" x1="0%" y1="0%" x2="100%" y2="100%">
Â  Â  Â  Â  Â  Â  <stop offset="0%" stop-color="#${config.color}" />
Â  Â  Â  Â  Â  Â  <stop offset="100%" stop-color="#${config.color}99"/>
Â  Â  Â  Â  Â  </linearGradient>
Â  Â  Â  Â  </defs>
Â  Â  Â  Â  <rect width="${dims.totalWidth}" height="26" rx="13" fill="url(#flow-grad)"/>
Â  Â  Â  `
Â  Â  },
Â  Â  minimal: {
Â  Â  Â  height: 24,
Â  Â  Â  radius: 6,
Â  Â  Â  font: 10,
Â  Â  Â  template: (config, dims) => `
Â  Â  Â  Â  <rect width="${dims.totalWidth}" height="24" rx="6"
Â  Â  Â  Â  Â  Â  Â  fill="#${config.color}" opacity="0.12"/>
Â  Â  Â  Â  <rect x="1" y="1" width="${dims.totalWidth-2}" height="22" rx="5"
Â  Â  Â  Â  Â  Â  Â  fill="none" stroke="#${config.color}" stroke-width="1.5"/>
Â  Â  Â  `
Â  Â  }
Â  };

Â  static process(styleName, config, dimensions) {
Â  Â  const style = this.MODERN_STYLES[styleName] || this.MODERN_STYLES.glass;
Â  Â  return {
Â  Â  Â  ...style,
Â  Â  Â  background: style.template(config, dimensions)
Â  Â  };
Â  }
}


// ============================================
// MODULE : ANIMATIONS CRÃ‰ATIVES
// ============================================
class CreativeAnimationsModule {
Â  static ANIMATIONS = {
Â  Â  'pulse-scale': `
Â  Â  Â  @keyframes p { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.03); } }
Â  Â  Â  svg { animation: p 2s ease-in-out infinite; }`,
Â  Â  'neon-glow': `
Â  Â  Â  @keyframes n { 0%, 100% { filter: drop-shadow(0 0 3px currentColor); } 50% { filter: drop-shadow(0 0 6px currentColor); } }
Â  Â  Â  .neon-rect { color: #${(props) => props.color}; animation: n 1.5s ease-in-out infinite; }`,
Â  Â  'wave': `
Â  Â  Â  @keyframes w { 0%,100% { transform: translateY(0); } 50% { transform: translateY(-4px) rotate(2deg); } }
Â  Â  Â  svg { animation: w 3s ease-in-out infinite; }`,
Â  Â  'shimmer': `
Â  Â  Â  @keyframes s { 100% { transform: translateX(100%); } }
Â  Â  Â  .shimmer-rect { animation: s 2s ease-in-out infinite; }`,
Â  Â  'rotate-3d': `
Â  Â  Â  @keyframes r { 0%, 100% { transform: perspective(800px) rotateY(0deg); } 50% { transform: perspective(800px) rotateY(20deg); } }
Â  Â  Â  svg { animation: r 4s ease-in-out infinite; }`,
Â  };

Â  static process(animationName, config) {
Â  Â  if (!this.ANIMATIONS[animationName]) return '';
Â  Â  return (this.ANIMATIONS[animationName]).replace(/\${(props) => props.color}/g, config.color);
Â  }

Â  static getAvailableAnimations() {
Â  Â  return Object.keys(this.ANIMATIONS);
Â  }
}


// ============================================
// MODULE : GÃ‰NÃ‰RATEUR SVG CRÃ‰ATIF
// ============================================
class CreativeSVGGenerator {
Â  static generate(config) {
Â  Â  const dimensions = this._calculateDimensions(config);
Â  Â  const style = VisualStylesModule.process(config.style, config, dimensions);
Â  Â  const animation = CreativeAnimationsModule.process(config.animate, config);

Â  Â  return `<svg xmlns="http://www.w3.org/2000/svg"
Â  Â  Â  Â  Â  Â  width="${dimensions.totalWidth}"
Â  Â  Â  Â  Â  Â  height="${style.height}"
Â  Â  Â  Â  Â  Â  role="img"
Â  Â  Â  Â  Â  Â  aria-label="${config.label}: ${config.message}">
Â  ${animation ? `<style>${animation}</style>` : ''}
Â  <title>${config.label}: ${config.message}</title>
Â  ${style.background}
Â  ${this._getShimmerOverlay(config, dimensions, style)}
Â  <g fill="${config.textColor || '#ffffff'}"
Â  Â  Â text-anchor="middle"
Â  Â  Â font-family="-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'sans-serif', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'"
Â  Â  Â font-weight="500"
Â  Â  Â font-size="${style.font}px">
Â  Â  ${config.icon ? `<text x="${dimensions.iconX}" y="${style.height / 2}" dominant-baseline="central" font-size="14px">${config.icon}</text>` : ''}
Â  Â  <text x="${dimensions.labelX}" y="${style.height / 2}" dominant-baseline="central" fill-opacity="0.8">${config.label}</text>
Â  Â  <text x="${dimensions.messageX}" y="${style.height / 2}" dominant-baseline="central" font-weight="600" fill="${config.messageColor || '#ffffff'}">${config.message}</text>
Â  </g>
</svg>`;
Â  }
Â  
Â  static _getShimmerOverlay(config, dimensions, style) {
Â  Â  if (config.animate !== 'shimmer') return '';
Â  Â  return `<mask id="m"><rect width="${dimensions.totalWidth}" height="${style.height}" rx="${style.radius}" ry="${style.radius}" fill="#fff"/></mask>
Â  Â   <g mask="url(#m)">
Â  Â  Â  Â <rect class="shimmer-rect" x="0" y="0" width="${dimensions.totalWidth * 0.5}" height="${style.height}" fill="rgba(255,255,255,0.5)" transform="translateX(-100%)"/>
Â  Â   </g>`;
Â  }

Â  // ðŸ‘ˆ CORRECTION: Logique de calcul de largeur revue pour les emojis
Â  static _calculateDimensions(config) {
Â  Â  const charWidth = 7.5; // Largeur moyenne d'un caractÃ¨re
Â  Â  const emojiWidth = 14; // Largeur pour un emoji
Â  Â  const padding = 15;
Â  Â  const iconPadding = 22;

Â  Â  // Utilise Array.from pour compter correctement les caractÃ¨res Unicode (emojis)
Â  Â  const countChars = (str) => Array.from(str).length;

Â  Â  let labelWidth = countChars(config.label) * charWidth + padding;
Â  Â  if (config.icon) {
Â  Â  Â  labelWidth += iconPadding;
Â  Â  }

Â  Â  const messageWidth = countChars(config.message) * charWidth + padding;
Â  Â  const totalWidth = labelWidth + messageWidth;

Â  Â  const iconX = padding / 2 + emojiWidth / 2;
Â  Â  const labelX = config.icon ? iconX + iconPadding : labelWidth / 2;

Â  Â  return {
Â  Â  Â  totalWidth,
Â  Â  Â  labelX,
Â  Â  Â  messageX: labelWidth + messageWidth / 2,
Â  Â  Â  iconX
Â  Â  };
Â  }
}

// ============================================
// ORCHESTRATEUR
// ============================================
class CreativeOrchestrator {
Â  constructor() {
Â  Â  this.cache = new Map();
Â  Â  this.stats = { generated: 0, cached: 0, errors: 0 };
Â  }

Â  async generate(params) {
Â  Â  try {
Â  Â  Â  const config = this._parseParams(params);
Â  Â  Â  const cacheKey = JSON.stringify(config);
Â  Â  Â Â 
Â  Â  Â  if (this.cache.has(cacheKey)) {
Â  Â  Â  Â  this.stats.cached++;
Â  Â  Â  Â  return this.cache.get(cacheKey);
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  const svg = CreativeSVGGenerator.generate(config);
Â  Â  Â  this.cache.set(cacheKey, svg);
Â  Â  Â  this.stats.generated++;
Â  Â  Â Â 
Â  Â  Â  if (this.cache.size > 200) {
Â  Â  Â  Â  const firstKey = this.cache.keys().next().value;
Â  Â  Â  Â  this.cache.delete(firstKey);
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  return svg;
Â  Â  } catch (error) {
Â  Â  Â  this.stats.errors++;
Â  Â  Â  return this._generateErrorSVG(error.message);
Â  Â  }
Â  }

Â  _parseParams(params) {
Â  Â  return {
Â  Â  Â  // ðŸ‘ˆ CORRECTION: Utilise la fonction d'Ã©chappement robuste
Â  Â  Â  label: this._escapeXml(params.label) || 'Label',
Â  Â  Â  message: this._escapeXml(params.message) || 'Message',
Â  Â  Â  // ðŸ‘ˆ CORRECTION: Gestion plus fiable de la couleur depuis les params ou query
Â  Â  Â  color: ColorModule.resolve((params.color || params.queryColor)),
Â  Â  Â  style: this._validateStyle(params.style),
Â  Â  Â  animate: this._validateAnimation(params.animate),
Â  Â  Â  icon: params.icon ? this._escapeXml(params.icon) : null,
Â  Â  Â  textColor: params.textColor ? ColorModule.resolve(params.textColor) : 'ffffff',
Â  Â  Â  messageColor: params.messageColor ? ColorModule.resolve(params.messageColor) : 'ffffff'
Â  Â  };
Â  }

Â  // ðŸ‘ˆ CORRECTION: Fonction robuste pour Ã©chapper les caractÃ¨res spÃ©ciaux en XML/SVG
Â  _escapeXml(text) {
Â  Â  if (!text) return null;
Â  Â  return text.slice(0, 100)
Â  Â  Â  .replace(/&/g, '&amp;')
Â  Â  Â  .replace(/</g, '&lt;')
Â  Â  Â  .replace(/>/g, '&gt;')
Â  Â  Â  .replace(/"/g, '&quot;')
Â  Â  Â  .replace(/'/g, '&apos;');
Â  }

Â  _validateStyle(style) {
Â  Â  const validStyles = ['glass', 'neon', 'depth', 'gradient', 'minimal'];
Â  Â  return validStyles.includes(style) ? style : 'glass';
Â  }

Â  _validateAnimation(animation) {
Â  Â  const validAnimations = CreativeAnimationsModule.getAvailableAnimations();
Â  Â  return validAnimations.includes(animation) ? animation : null;
Â  }

Â  getStats() {
Â  Â  return {
Â  Â  Â  ...this.stats,
Â  Â  Â  cacheSize: this.cache.size,
Â  Â  Â  hitRate: this.stats.cached / (this.stats.generated + this.stats.cached) || 0
Â  Â  };
Â  }
Â  
Â  _generateErrorSVG(message) {
Â  Â  const cleanMessage = this._escapeXml(message.slice(0, 30));
Â  Â  return `<svg xmlns="http://www.w3.org/2000/svg" width="200" height="28" role="img">
Â  Â  Â <rect width="200" height="28" rx="6" fill="#ef4444"/>
Â  Â  Â <text x="100" y="14" dominant-baseline="central" text-anchor="middle" fill="#fff" font-family="sans-serif" font-size="11px" font-weight="600">
Â  Â  Â  Â Error: ${cleanMessage}
Â  Â  Â </text>
Â  Â  </svg>`;
Â  }
}

// ============================================
// API ROUTES
// ============================================
const orchestrator = new CreativeOrchestrator();

app.get('/badge/:label/:message/:color?', async (req, res) => {
Â  try {
Â  Â  const svg = await orchestrator.generate({
Â  Â  Â  label: decodeURIComponent(req.params.label),
Â  Â  Â  message: decodeURIComponent(req.params.message),
Â  Â  Â  color: req.params.color,
Â  Â  Â  queryColor: req.query.color, // Passe la couleur de la query sÃ©parÃ©ment
Â  Â  Â  style: req.query.style,
Â  Â  Â  animate: req.query.animate,
Â  Â  Â  icon: req.query.icon ? decodeURIComponent(req.query.icon) : null,
Â  Â  Â  textColor: req.query.textColor,
Â  Â  Â  messageColor: req.query.messageColor
Â  Â  });
Â  Â Â 
Â  Â  res.setHeader('Content-Type', 'image/svg+xml; charset=utf-8');
Â  Â  res.setHeader('Cache-Control', 'public, max-age=3600, s-maxage=3600');
Â  Â  res.setHeader('Access-Control-Allow-Origin', '*');
Â  Â  res.send(svg);
Â  } catch (error) {
Â  Â  res.status(500).send('Internal Server Error');
Â  }
});

app.get('/', (req, res) => {
Â  res.send(`
<!DOCTYPE html>
<html lang="fr">
<head>
Â  <title>Shields Creative</title>
Â  <meta charset="UTF-8">
Â  <meta name="viewport" content="width=device-width, initial-scale=1.0">
Â  <style>
Â  Â  * { margin: 0; padding: 0; box-sizing: border-box; }
Â  Â  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #111827; color: #e5e7eb; padding: 40px 20px; }
Â  Â  .container { max-width: 1200px; margin: 0 auto; }
Â  Â  h1 { font-size: 3em; margin-bottom: 10px; color: #fff; }
Â  Â  .tagline { font-size: 1.2em; color: #9ca3af; margin-bottom: 40px; }
Â  Â  .card { background: #1f2937; border-radius: 12px; padding: 30px; margin-bottom: 30px; border: 1px solid #374151; }
Â  Â  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px; margin-top: 20px; }
Â  Â  .example { background: #374151; padding: 20px; border-radius: 8px; text-align: center; }
Â  Â  .badge-preview { margin: 15px 0; display: flex; justify-content: center; align-items: center; min-height: 50px; }
Â  Â  code { background: #111827; padding: 4px 10px; border-radius: 6px; font-size: 0.85em; display: inline-block; margin-top: 10px; color: #a5b4fc; word-break: break-all;}
Â  Â  h2 { margin-bottom: 20px; font-size: 1.8em; color: #fff; }
Â  </style>
</head>
<body>
Â  <div class="container">
Â  Â  <h1>Shields Creative v1.3</h1>
Â  Â  <p class="tagline">Service de badges SVG stables avec emojis et animations.</p>
Â  Â Â 
Â  Â  <div class="card">
Â  Â  Â  <h2>Exemples CorrigÃ©s</h2>
Â  Â  Â  <div class="grid">
Â  Â  Â  Â  <div class="example">
Â  Â  Â  Â  Â  <h3>Couleur NommÃ©e (Success)</h3>
Â  Â  Â  Â  Â  <div class="badge-preview"><img src="/badge/build/passing/success" alt="Success"></div>
Â  Â  Â  Â  Â  <code>/badge/build/passing/success</code>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div class="example">
Â  Â  Â  Â  Â  <h3>Couleur HexadÃ©cimale (sans #)</h3>
Â  Â  Â  Â  Â  <div class="badge-preview"><img src="/badge/coverage/98%25/fbbf24" alt="Coverage"></div>
Â  Â  Â  Â  Â  <code>/badge/coverage/98%25/fbbf24</code>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div class="example">
Â  Â  Â  Â  Â  <h3>Emoji dans le Label (URL-encodÃ©)</h3>
Â  Â  Â  Â  Â  <div class="badge-preview"><img src="/badge/Tests%20%E2%9C%85/124%20passed/success" alt="Emoji Test"></div>
Â  Â  Â  Â  Â  <code>/badge/Tests%20%E2%9C%85/124%20passed/success</code>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div class="example">
Â  Â  Â  Â  Â  <h3>IcÃ´ne Emoji (Query Param)</h3>
Â  Â  Â  Â  Â  <div class="badge-preview"><img src="/badge/Likes/99k/pink?icon=%F0%9F%92%96" alt="Icon Emoji"></div>
Â  Â  Â  Â  Â  <code>/badge/Likes/99k/pink?icon=%F0%9F%92%96</code>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  </div>
</body>
</html>`);
});

app.get('/stats', (req, res) => {
Â  res.json({
Â  Â  service: 'Shields Creative',
Â  Â  version: '1.3.0',
Â  Â  status: 'operational',
Â  Â  stats: orchestrator.getStats(),
Â  Â  availableStyles: Object.keys(VisualStylesModule.MODERN_STYLES),
Â  Â  availableAnimations: CreativeAnimationsModule.getAvailableAnimations()
Â  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
Â  console.log(`Shields Creative v1.3 listening on port ${PORT}`);
});
